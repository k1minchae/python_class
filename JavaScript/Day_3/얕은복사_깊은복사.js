// 얕은 복사
// - 주소값을 복사 == 복사한 값을 변경하면 원본값도 변경
// 깊은 복사
// - 값을 복사 == 복사한 값을 변경해도 원본값은 그대로

let a = 10
let b = a
b = 20

// 깊은 복사가 발생해서, 원본값은 안변한다
// console.log(a)  // 10
// console.log(b)  // 20

let c = [1, 2, 3]
let d = c   // 얕은 복사: c의 주소값이 d에 저장
d[1] = 4    // d의 주소값에서 1칸 만큼 이동한 곳의 값을 4로 변경

// console.log(c) // [1, 4, 3]
// console.log(d) // [1, 4, 3]


function func(arr) {
    arr[0] = 10
}

const arr = [1, 2, 3, 4, 5]
// const 인데 변경이 된다?
// arr은 실제로 주소값을 저장
// 아래 코드 주소값을 이용해서 주소값 + 2칸인 곳의 값을 바꿔라.
// 주소값을 변경하는 건 아니다! -> const 에 위배되지 않는다.
arr[2] = 30
// 참조 자료형은 주소값을 함수로 전달
func(arr)
console.log(arr)